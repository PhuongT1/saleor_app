diff --git a/build/esm/common/internal.js b/build/esm/common/internal.js
index bc248c5f91313864c3cbccb730b151dac96e553d..e6670f9998314b6af1235c62cdfdace04eeb6a5e 100644
--- a/build/esm/common/internal.js
+++ b/build/esm/common/internal.js
@@ -27,7 +27,16 @@ export function toAnyValue(value) {
     var t = typeof value;
     if (t === 'string')
         return { stringValue: value };
-    if (t === 'number') {
+    if (Number.isNaN(value)) {
+        return { stringValue: 'NaN' };
+    }
+    if (value === Infinity) {
+        return { stringValue: 'Infinity' };
+    }
+    if (value === -Infinity) {
+        return { stringValue: '-Infinity' };
+    }
+    if (t === 'number' && Number.isFinite(value)) {
         if (!Number.isInteger(value))
             return { doubleValue: value };
         return { intValue: value };
diff --git a/build/esnext/common/internal.js b/build/esnext/common/internal.js
index d944336ffcccf5ccb5448375f3dcaa8e94f8449f..b4420eb8a4332f44c6a433713916007ec577d873 100644
--- a/build/esnext/common/internal.js
+++ b/build/esnext/common/internal.js
@@ -11,7 +11,16 @@ export function toAnyValue(value) {
     const t = typeof value;
     if (t === 'string')
         return { stringValue: value };
-    if (t === 'number') {
+    if (Number.isNaN(value)) {
+        return { stringValue: 'NaN' };
+    }
+    if (value === Infinity) {
+        return { stringValue: 'Infinity' };
+    }
+    if (value === -Infinity) {
+        return { stringValue: '-Infinity' };
+    }
+    if (t === 'number' && Number.isFinite(value)) {
         if (!Number.isInteger(value))
             return { doubleValue: value };
         return { intValue: value };
diff --git a/build/src/common/internal.js b/build/src/common/internal.js
index 07003b66be217daba00d71f5e316fde99afd29d2..1f0d6cd34fe450804d6fbabdff26328023d518b7 100644
--- a/build/src/common/internal.js
+++ b/build/src/common/internal.js
@@ -16,7 +16,16 @@ function toAnyValue(value) {
     const t = typeof value;
     if (t === 'string')
         return { stringValue: value };
-    if (t === 'number') {
+    if (Number.isNaN(value)) {
+        return { stringValue: 'NaN' };
+    }
+    if (value === Infinity) {
+        return { stringValue: 'Infinity' };
+    }
+    if (value === -Infinity) {
+        return { stringValue: '-Infinity' };
+    }
+    if (t === 'number' && Number.isFinite(value)) {
         if (!Number.isInteger(value))
             return { doubleValue: value };
         return { intValue: value };
